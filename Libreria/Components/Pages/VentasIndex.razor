@page "/ventas"
@rendermode InteractiveServer
@inject IRepositorioVentas _repositorioVentas
@inject NavigationManager _navigationManager

<PageTitle>Ventas</PageTitle>

<h3>Ventas</h3>

<a class="btn btn-primary mb-3" href="/ventasform">Registrar Venta</a>

@if (_ventas == null)
{
    <p><em>Cargando...</em></p>
}
else if (_ventas.Count > 0)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Cliente</th>
                <th>Libro</th>
                <th>Fecha</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var venta in _ventas)
            {
                <tr>
                    <td>@venta.Cliente?.Nombre</td>
                    <td>@venta.Libro?.Titulo</td>
                    <td>@venta.Fecha.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-outline-primary me-2" @onclick="() => Editar(venta.Id)">✏️</button>
                        <button class="btn btn-outline-danger" @onclick="() => Eliminar(venta.Id)">🗑️</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p><em>No hay ventas registradas.</em></p>
}

@code {
    private List<Venta>? _ventas;

    protected override async Task OnInitializedAsync()
    {
        _ventas = (await _repositorioVentas.ObtenerTodosAsync()).ToList();
    }

    void Editar(int id) => _navigationManager.NavigateTo($"/ventasform/{id}");

    async Task Eliminar(int id)
    {
        await _repositorioVentas.EliminarAsync(id);
        _ventas = (await _repositorioVentas.ObtenerTodosAsync()).ToList();
    }
}
