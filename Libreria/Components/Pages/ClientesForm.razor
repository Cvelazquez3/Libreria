@page "/clientesform/{Id:int?}"
@rendermode InteractiveServer
@inject IRepositorioClientes _repositorioClientes
@inject NavigationManager _navigationManager

<PageTitle>Formulario Cliente</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg">
                <div class="card-header bg-info text-white">
                    <h4 class="mb-0">@((cliente.Id == 0) ? "Nuevo Cliente" : "Editar Cliente")</h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(error))
                    {
                        <div class="alert alert-danger">@error</div>
                    }

                    <EditForm Model="cliente" OnValidSubmit="Guardar">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Nombre</label>
                            <InputText class="form-control" @bind-Value="cliente.Nombre" placeholder="Ej: Juan Pérez" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="cliente.Email" placeholder="Ej: juan@email.com" />
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-success">Guardar</button>
                            <button type="button" class="btn btn-secondary" @onclick="Volver">Cancelar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }

    Cliente cliente = new();
    string error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var encontrado = await _repositorioClientes.ObtenerPorIdAsync(Id.Value);
            if (encontrado != null)
            {
                cliente = encontrado;
            }
        }
    }

    async Task Guardar()
    {
        try
        {
            if (cliente.Id == 0)
                await _repositorioClientes.AgregarAsync(cliente);
            else
                await _repositorioClientes.ActualizarAsync(cliente);

            Volver();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    void Volver() => _navigationManager.NavigateTo("/clientes");
}
